#!/bin/bash

#set -x

# makes an init file for bash. Variables from the environment of 'start' will not expand
# within this heredoc because of the quotes around the EOF.  Yes, that is a thing.
read -r -d '' InitFile <<-"EOF"
     . $(/usr/local/bin/home)/.bashrc

     export PROJECT="tranche"
     export VERSION="dev"

     export HOME=$(/usr/local/bin/home)
     export SHELL=/bin/bash
     export ENV=/home/"$PROJECT"_"$VERSION"
     export PHOME="$ENV"/"$PROJECT"
     export TMP="$ENV"/tmp
     export PATH="$ENV"/bin/:"$ENV"/env/bin:$PATH
     export PS1='\n$(/usr/local/bin/Z) [$(echo "$PROJECT"_"$VERSION")]\n\u@\h§\w§\n> '
     if [ ! -d "$TMP" ]; then 
       mkdir "$TMP"
     fi
     cd "$PHOME"
     echo $PATH
EOF

# exec -c and env -i, where INSIDE_EMACS is set in the calling shell and is also set in
# the init script of the newly launched shell, does not work.  In both cases emacs stops
# tracking directory changes in the newly launched shell.  Emacs will continue to track
# directory changes if we call bash directly, or if we use env -i with INSIDE_EMACS defined
# as a parameter.
env -i \
    INSIDE_EMACS="$INSIDE_EMACS" \
    HOSTNAME="$HOSTNAME" \
    LOGNAME="$LOGNAME" \
    USERNAME="$USERNAME" \
    DISPLAY="$DISPLAY" \
    TERM="$TERM" \
    TERMCAP="$TERMCAP" \
    EDITOR="$EDITOR" \
    PATH="/usr/local/bin:/usr/bin:/bin" \
    /bin/bash --init-file <(echo "$InitFile")

#set +x
